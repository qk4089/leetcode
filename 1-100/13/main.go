package _13

//https://leetcode.cn/problems/roman-to-integer/
//罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
//	字符          数值
//	I             1
//	V             5
//	X             10
//	L             50
//	C             100
//	D             500
//	M             1000
//例如: 罗马数字2写做II，即为两个并列的1。12写做XII，即为X+II。27写做XXVII, 即为XX+V+II。通常情况下，罗马数字中小的数字在大的数字的右边。
//但也存在特例，例如4不写做IIII，而是IV。数字1在数字5的左边，所表示的数等于大数5减小数1得到的数值4。同样地，数字9表示为IX。
//这个特殊的规则只适用于以下六种情况：
//	I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
//	X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。
//	C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。

//给定一个罗马数字，将其转换成整数。

//示例 1:
//输入: s = "III"
//输出: 3

//输入: s = "IV"
//输出: 4

//输入: s = "IX"
//输出: 9

//输入: s = "LVIII"
//输出: 58
//解释: L = 50, V= 5, III = 3.

//输入: s = "MCMXCIV"
//输出: 1994
//解释: M = 1000, CM = 900, XC = 90, IV = 4.

//提示：
//	1 <= s.length <= 15
//	s 仅含字符 ('I', 'V', 'X', 'L', 'C', 'D', 'M')
//	题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内
//	题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。
//	IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。

func romanToInt(s string) int {
	sum, charMap := 0, map[byte]int{'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}
	sum += charMap[s[len(s)-1]]
	for i := len(s) - 2; i >= 0; i-- {
		if charMap[s[i]] < charMap[s[i+1]] {
			sum -= charMap[s[i]]
		} else {
			sum += charMap[s[i]]
		}
	}
	return sum
}
