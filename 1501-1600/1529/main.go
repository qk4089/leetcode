package _1529

//给你一个长度为n、下标从0开始的二进制字符串target。你自己有另一个长度为n的二进制字符串s，最初每一位上都是0。你想要让s和target相等。
//在一步操作，你可以选择下标i（0<=i<n）并翻转在闭区间[i,n-1]内的所有位。翻转意味着'0'变为'1'，而'1'变为'0'。

//返回使s与target相等需要的最少翻转次数。

//示例1：
//输入：target="10111"
//输出：3
//解释：最初，s="00000"。
//选择下标i=2:"00000"->"00111"
//选择下标i=0:"00111"->"11000"
//选择下标i=1:"11000"->"10111"
//要达成目标，需要至少3次翻转。

//输入：target="101"
//输出：3
//解释：最初，s="000"。
//选择下标i=0:"000"->"111"
//选择下标i=1:"111"->"100"
//选择下标i=2:"100"->"101"
//要达成目标，需要至少3次翻转。

//输入：target="00000"
//输出：0
//解释：由于s已经等于目标，所以不需要任何操作

//提示：
//	n==target.length
//	1<=n<=10^5
//	target[i]为'0'或'1'

func minFlips(target string) int {
	count, tmp := 0, target[0]
	if tmp == '1' {
		count++
	}
	for i := 1; i < len(target); i++ {
		if target[i] != tmp {
			tmp = target[i]
			count++
		}
	}
	return count
}
